http://raspberrypi.stackexchange.com/questions/10489/how-does-raspberry-pi-boot -> booting process

https://wolfpaulus.com/journal/embedded/raspberrypi_boot/ ->booting process

https://www.raspberrypi.org/downloads ->noops dowanload


####### booting of Rasberry pi 


1)When the Raspberry Pi is first turned on, the ARM core is off, and the GPU core is on. At this point the SDRAM is disabled.
2)The GPU starts executing the first stage bootloader, which is stored in ROM on the SoC. The first stage bootloader reads the SD card, and loads the second stage bootloader (bootcode.bin) into the L2 cache, and runs it.
3)bootcode.bin enables SDRAM, and reads the third stage bootloader (loader.bin) from the SD card into RAM, and runs it.
4)loader.bin reads the GPU firmware (start.elf).
5)start.elf reads config.txt, cmdline.txt and kernel.img
loader.bin doesn't do much. It can handle .elf files, and so is needed to load start.elf at the top of memory (ARM uses SDRAM from address zero). There is a plan to add elf loading support to bootcode.bin, which would make loader.bin unnecessary, but it's a low priority (I guess it might save you 100ms on boot).



for Raspberry board 1 supported kenel.img

for Raspberry board 1 supported kenel7.img
$$$$$$$$$$$$$$

Kernel building for Raspberry
	* https://www.raspberrypi.org/documentation/linux/kernel/building.md

make -j4 zImage modules dtbs
sudo make modules_install
sudo cp arch/arm/boot/dts/*.dtb /boot/
sudo cp arch/arm/boot/dts/overlays/*.dtb* /boot/overlays/
sudo cp arch/arm/boot/dts/overlays/README /boot/overlays/
sudo scripts/mkknlimg arch/arm/boot/zImage /boot/$KERNEL.img

sudo make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- INSTALL_MOD_PATH=mnt/ext4 modules_install


then copy your lib/modules to sdcard 
and firmware copy to sd card

